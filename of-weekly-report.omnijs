/*{
	"type": "action",
	"targets": ["omnifocus"],
	"author": "Lin Yiming",
  "email": "lynnmatrix@hotmail.com",
	"identifier": "com.omni-automation.of.weekly-report",
	"version": "1.2",
	"description": "Generete weekly report in markdown",
	"label": "weekly report",
	"shortLabel": "weekly report",
	"paletteLabel": "weekly report",
}*/

(() => {
	const titlePrefix = "周志"
  const completedTitle = "本周进展"
  const todoTitle = "下周计划"
  const targetFolderName = ""
  const emailTo = ""
  const emailCc = "" 

	var action = new PlugIn.Action(function(selection, sender){

		let previousWeek = getPreviousWeek()
		
		let targetFolder = null != targetFolderName? folderNamed(targetFolderName):null
		
		var report = reportFolder(targetFolder, 0, "DONE")

		report.unshift(`${completedTitle}`)
		var doneText = report.join('\n')

		var report = reportFolder(targetFolder, 0, "PLAN")
		report.unshift(`${todoTitle}`)
		var planText = report.join('\n')

		let title = '周志 ' + formatDate(previousWeek[0])+'-' + formatDate(previousWeek[1])
		let reportText = doneText +"\n\n"+ planText

		var email = new Email()
		email.subject = title
		email.body = reportText
		email.receiver = emailTo
		email.carbonCopy = emailCc
		email.generate()
	});
		
	return action;
})();

function createReport() {
	return []
}

function getIntent(level) {
	var intent = ""
	for (i=2;i < level;i++) {
		intent += "  "
	}
	return intent
}

function getListPrefix(level, order) {
	intent = getIntent(level)
	chinese_prefix = ['', '一','二','三','四','五','六','七','八','九','十']
	prefix = "*"
	if (level == 1) {
		prefix = chinese_prefix[order]+"."
	} else if (level == 2) {
		prefix = order+"."
	} else if (level == 3) {
		prefix = '(' + order + ')'
	} else if (level == 4) {
		prefix = order + ')'
	}
	return intent + prefix
}

function reportFolder(folder, level, focus="DONE") {
	var folderReport = createReport()
	if (folder != null && folder.status != Folder.Status.Active) {
		return folderReport
	} 

	let subFolders = folder == null ? folders : folder.folders
	var order = 1
	subFolders.forEach((subFolder) => {

		var subFolderReport = reportFolder(subFolder, level+1, focus)
		
		if (subFolderReport.length > 0) {
			let projectPrefix = getListPrefix(level+1, order)
			folderReport.push(projectPrefix + subFolder.name)
			folderReport = folderReport.concat(subFolderReport)
			if (order > 1) {
				folderReport.push("\n")
			}
			order += 1
		}
	})

	let subProjects = folder == null ? projects : folder.projects
	subProjects.forEach((subProject, index) => {
		var subProjectReport = reportProject(subProject, level+1, focus)

		if (subProjectReport.length > 0) {
			let projectPrefix = getListPrefix(level+1, order)
			folderReport.push(projectPrefix + subProject.name)
			folderReport = folderReport.concat(subProjectReport)
			if (order > 1) {
				folderReport.push("\n")
			}
			order += 1
		}
	})

	return folderReport
}

function reportProject(project, level, focus) {
	var projectReport = createReport()
	if (project.status != Project.Status.Active) {
		return projectReport
	} 

	var order = 1
	project.tasks.forEach((task) => {
		_taskReport = reportTask(task, level+1, order, focus)
		if(_taskReport.length > 0) {
			let projectPrefix = getListPrefix(level+1, order)
			projectReport = projectReport.concat(_taskReport)
			if (order > 1) {
				//projectReport.push("\n")
			}
			order += 1
		}
	})
	return projectReport
}

function reportTask(task, level, order, focus) {
	let taskTitle = generateTitle(level, order, task)

	var taskReport = createReport()
	var subTaskReport = createReport()
	_order = 1
	task.tasks.forEach((subTask) => {
		_taskReport = reportTask(subTask, level + 1, _order, focus)

		if(_taskReport.length > 0) {
			subTaskReport = subTaskReport.concat(_taskReport)
			_order += 1
		}
	})
	if (subTaskReport.length > 0) {
		taskReport.push(taskTitle)
		taskReport = taskReport.concat(subTaskReport)
	}

	if (taskReport.length == 0) {
		
		if (focus == "DONE" 
				&& task.completed 
				&& duringPreviousWeek(task.completionDate)) {
			
			taskReport.push(taskTitle)
			if (task.note) {
				notes = task.note.split("\n")
				var intent = getIntent(level)
				const prefixReg = /^[\d\*]/

				notes.forEach((_note) => {
					let _prefix = prefixReg.test(_note)? "  ": "  * "
					taskReport.push(intent + _prefix + _note)
				})	
			}
		} else if (focus == "PLAN" 
							&& ![Task.Status.Completed, Task.Status.Dropped].includes(task.taskStatus)) {
			//  不是所有未完成都会列为计划
			if (task.deferDate == null || task.deferDate < getNextWeekEnd()) {
				taskReport.push(taskTitle)
			}
		}
	}

	return taskReport
}

function generateTitle(level, order, task) {
	let prefix = getListPrefix(level, order)
	let tagText = task.tags.map(tag => ` @${tag.name}`).join('')
	let dueText = (!task.completed && task.dueDate)? " =>|" + task.dueDate.toLocaleString(): ""
	return prefix + task.name + tagText + dueText
}

function duringPreviousWeek(date) {
	let previousWeek = getPreviousWeek()
	return date >= previousWeek[0] && date < previousWeek[1]
}

function getPreviousWeek(){
	var date = new Date();
	var day = date.getDay();
	var prevWeekStart = new Date();
	
	prevWeekStart.setDate(date.getDate() - day - 1);

	var cal = Calendar.current
	
	prevWeekStart = cal.startOfDay(prevWeekStart)
	var prevWeekEnd = new Date(prevWeekStart)
	prevWeekEnd.setDate(prevWeekStart.getDate() + 7)
	return [prevWeekStart, prevWeekEnd]
}

function getNextWeekEnd() {
	var nextWeekEnd = new Date(getPreviousWeek()[1])
	nextWeekEnd.setDate(nextWeekEnd.getDate + 7)
	return nextWeekEnd
}

function formatDate(date) {

	var d = new Date(date),
			month = '' + (d.getMonth() + 1),
			day = '' + d.getDate(),
			year = d.getFullYear();

	if (month.length < 2) 
			month = '0' + month;
	if (day.length < 2) 
			day = '0' + day;

	return [year, month, day].join('');
}
